From d35614de15afa0496771a311cf9ae416dcdf1781 Mon Sep 17 00:00:00 2001
From: Patric Bechtel <p.bechtel@oashi.com>
Date: Fri, 18 Jul 2014 10:58:04 +0200
Subject: [PATCH] re-enabled the hq-scaling again.

---
 .../org/apache/pdfbox/rendering/PageDrawer.java    | 61 +++++++++++++++++++---
 1 file changed, 54 insertions(+), 7 deletions(-)

diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
index 649da2d..b699fa5 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
@@ -102,7 +102,7 @@
 
     // parent document renderer
     private final PDFRenderer renderer;
-
+    private boolean highQuality = false;
     private Graphics2D graphics;
 
     // clipping winding rule used for the clipping path
@@ -117,6 +117,15 @@
 
     private PDRectangle pageSize;
 
+    private RenderingHints renderingHints=null;
+    static private RenderingHints defaultRenderingHints;
+
+    static {
+       defaultRenderingHints=new RenderingHints(null);
+       defaultRenderingHints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+       defaultRenderingHints.put(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
+    }
+
     /**
      * Default constructor, loads properties from file.
      *
@@ -148,6 +157,15 @@ public PDFRenderer getRenderer()
         return renderer;
     }
 
+    public void setRenderingHints(RenderingHints renderingHints) {
+       this.renderingHints=renderingHints;
+    }
+
+    public void applyRenderingHints(Graphics2D g) {
+       RenderingHints rh=renderingHints!=null?renderingHints:defaultRenderingHints;
+       g.setRenderingHints(rh);
+    }
+
     /**
      * This will draw the page to the requested context.
      *
@@ -160,8 +178,7 @@ public void drawPage(Graphics g, PDRectangle pageSize) throws IOException
     {
         graphics = (Graphics2D) g;
         this.pageSize = pageSize;
-        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-        graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
+        applyRenderingHints(graphics);
         graphics.translate(0, (int)pageSize.getHeight());
         graphics.scale(1, -1);
         // TODO use getStroke() to set the initial stroke
@@ -224,8 +241,7 @@ public void drawTilingPattern(Graphics2D g, PDTilingPattern pattern, PDRectangle
     {
         pageSize = pageDimension;
         graphics = g;
-        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-        graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
+        applyRenderingHints(g);
 
         initStream(pageDimension);
 
@@ -354,7 +370,7 @@ protected void processGlyph(Matrix textMatrix, Point2D.Float end, float maxHeigh
      */
     private void drawGlyph2D(Glyph2D glyph2D, int[] codePoints, AffineTransform at) throws IOException
     {
-        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+        applyRenderingHints(graphics);
         for (int i = 0; i < codePoints.length; i++)
         {
             GeneralPath path = glyph2D.getPathForCharacterCode(codePoints[i]);
@@ -419,7 +435,7 @@ private void drawString(PDFont font, String string, AffineTransform at) throws I
         Font awtFont = createAWTFont(font);
         FontRenderContext frc = new FontRenderContext(new AffineTransform(), true, true);
         GlyphVector glyphs = awtFont.createGlyphVector(frc, string);
-        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+        applyRenderingHints(graphics);
         writeFont(at, glyphs);
     }
 
@@ -852,6 +868,37 @@ public void drawBufferedImage(BufferedImage image, AffineTransform at) throws IO
             AffineTransform imageTransform = new AffineTransform(at);
             imageTransform.scale(1.0 / width, -1.0 / height);
             imageTransform.translate(0, -height);
+            //graphics.drawImage(image, imageTransform, null);
+
+            AffineTransform result=new AffineTransform(graphics.getTransform());
+            result.concatenate(imageTransform);
+            result.concatenate( graphics.getDeviceConfiguration().getNormalizingTransform() );
+            int targetWidth=(int)(width*result.getScaleX());
+            int targetHeight=(int)(height*result.getScaleY());
+            if (targetWidth>=3 && targetHeight>=3)
+            {
+                ResampleOp  resampleOp = new ResampleOp(targetWidth,targetHeight);
+                if (highQuality)
+                {
+                   resampleOp.setUnsharpenMask(AdvancedResizeOp.UnsharpenMask.Normal);
+                   resampleOp.setFilter(ResampleFilters.getLanczos3Filter());
+                }
+                else
+                {
+                   // cubic hf provides good compromise between sharpness and speed
+                   resampleOp.setFilter(ResampleFilters.getBiCubicHighFreqResponse());
+                   // triangle is slightly fuzzier, similar speed
+                   // resampleOp.setFilter(ResampleFilters.getTriangleFilter());
+                }
+
+                image = resampleOp.filter((BufferedImage)image, null);
+                width=targetWidth;
+                height=targetHeight;
+
+                imageTransform = new AffineTransform(at);
+                imageTransform.scale(1.0 / targetWidth, -1.0 / targetHeight);
+                imageTransform.translate(0, -targetHeight);
+            }
             graphics.drawImage(image, imageTransform, null);
         }
     }
